fin linea  - linea 6 - seconds 1466540931 ; nanoseconds 673098895 

==3616== Cachegrind, a cache and branch-prediction profiler
==3616== Copyright (C) 2002-2013, and GNU GPL'd, by Nicholas Nethercote et al.
==3616== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==3616== Command: ./Tp2
==3616== 
--3616-- warning: L3 cache found, using its data for the LL simulation.
==3616== 
==3616== I   refs:      8,670,127,274
==3616== I1  misses:        8,202,137
==3616== LLi misses:            1,354
==3616== I1  miss rate:          0.09%
==3616== LLi miss rate:          0.00%
==3616== 
==3616== D   refs:      4,468,778,401  (3,523,915,222 rd   + 944,863,179 wr)
==3616== D1  misses:      148,435,762  (  148,141,549 rd   +     294,213 wr)
==3616== LLd misses:           33,697  (       10,287 rd   +      23,410 wr)
==3616== D1  miss rate:           3.3% (          4.2%     +         0.0%  )
==3616== LLd miss rate:           0.0% (          0.0%     +         0.0%  )
==3616== 
==3616== LL refs:         156,637,899  (  156,343,686 rd   +     294,213 wr)
==3616== LL misses:            35,051  (       11,641 rd   +      23,410 wr)
==3616== LL miss rate:            0.0% (          0.0%     +         0.0%  )


--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         3145728 B, 64 B, 12-way associative
Command:          ./Tp2
Data file:        cachegrind.out.3616
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir      I1mr  ILmr            Dr        D1mr   DLmr          Dw    D1mw   DLmw 
--------------------------------------------------------------------------------
8,670,127,274 8,202,137 1,354 3,523,915,222 148,141,549 10,287 944,863,179 294,213 23,410  PROGRAM TOTALS


           42       7    1           0           0     0          36       5      0  void matrix_multiply(matrix_t* m1, matrix_t* m2, matrix_t* mr, int bs) {
            .       .    .           .           .     .           .       .      .  	size_t n, en, i, j, k, kk, jj;
            .       .    .           .           .     .           .       .      .  	double sum;
            .       .    .           .           .     .           .       .      .  	double m1e, m2e;
            .       .    .           .           .     .           .       .      .  
           18       0    0          12           6     0           6       0      0  	n = m1->rows;
           54       0    0          18           0     0           6       0      0  	en = bs*(n/bs);
            .       .    .           .           .     .           .       .      .  
           66       2    2          36           0     0           6       0      0  	for(kk=0; kk<en; kk+=bs)
           66       0    0          36           0     0           6       0      0  		for(jj=0; jj<en; jj+=bs)
        6,942       0    0       5,196           0     0           6       0      0  			for(i=0; i<n; i++)
    3,499,200       1    1   1,997,568           0     0       1,728       0      0  				for(j=jj; j<jj+bs; j++) {
    6,469,632       6    1   2,985,984      31,104 8,257     497,664       0      0  					sum = mr->array[i*n+j];
1,007,769,600       1    1 575,299,584           0     0     497,664       0      0  					for(k=kk; k<kk+bs; k++) {
1,863,254,016       6    1 859,963,392   4,549,620     0 143,327,232       0      0  						m1e = m1->array[i*n+k];
1,863,254,016       0    0 859,963,392 143,318,013     0 143,327,232       0      0  						m2e = m2->array[k*n+j];
  716,636,160       0    0 429,981,696           0     0 143,327,232       0      0  						sum += m1e * m2e;
            .       .    .           .           .     .           .       .      .  					}
    5,971,968       0    0   2,985,984     207,360     0     497,664 186,604      0  					mr->array[i*n+j] = sum;
            .       .    .           .           .     .           .       .      .  				}
           18       0    0          18           6     0           0       0      0  }
